{"version":3,"sources":["components/design-area/style.module.css","svg-designer.module.css","contexts/dynamic-context-utils.js","contexts/globalContexts.js","consts.js","components/design-area/drawers.js","components/design-area/mouse-handlers.js","components/design-area/index.jsx","utils/event-manager.js","components/tool-area/tools/history.jsx","components/tool-area/tools/drawing-tool-selector.jsx","components/tool-area/tools/path-logger.jsx","components/tool-area/index.jsx","svg-designer.jsx","serviceWorker.js","index.jsx","components/tool-area/tools/style.module.css","components/tool-area/style.module.css"],"names":["module","exports","useDynamicContextProvider","init","useState","state","setState","useDynamicContextConsumer","context","useContext","useDynamicContextConsumerState","defaultDynamicContextData","createDynamicContext","createContext","DesignAreaContext","ViewportContext","ModeContext","HistoryContext","ModifyingItemContext","PathElementsContext","DrawingModes","Object","freeze","NONE","PATH","RECT","CIRCLE","getName","drawingMode","getIcon","dist","pt1","pt2","Math","sqrt","pow","x","y","createRect","style","info","width","abs","height","element","svgUtils","renderer","createElementInfo","createRectFromCenter","createArcElement","keyPressed","pt3","midPt","baseLen","addSize","to","arcRad","bigArc","shift","isPositiveArc","a","b","y1","xDirection","drawWrapperImage","activePt","pathElements","isDragging","tempPts","setTempElement","setTempPts","initElement","setWrapperElements","pathBuffer","tempElement1","setPathBuffer","tempElement2","pt","prevPts","pts","length","prevPt","alt","cx","cy","r","createCircle2","fill","stroke","strokeWidth","strokeDasharray","createCircle1","len","rx","ry","createEllipse2","createEllipse1","xLen","yLen","pmX","pmY","console","log","arc","currElements","map","i","unclosedRender","line","baseElement","wrapperElements","ctrl","getPtFromEvent","e","ratio","target","clientWidth","window","scrollX","clientX","scrollY","clientY","createMouseDownHandler","setActivePt","setIsDragging","path","pathUtils","createMouseMoveHandler","createMouseUpHandler","setPathElements","setHistory","tempElement","ELLIPSE","ELLIPSE_BY_WH","pathLog","type","rateToPercent","rate","keys","props","designAreaVals","viewport","modes","setModes","history","tempSvg","setTempSvg","actualSvg","setActualSvg","setKeyPressed","designAreaStyle","useMemo","wRate","hRate","hooksContextVals","useEffect","elements","item","svg","svgRender","React","createElement","left","top","pathLogs","paths","render","keyDownHandler","key","keyUpHandler","addEventListener","removeEventListener","mouseProps","onMouseDown","onMouseMove","onMouseUp","pathElementArr","tempPaths","strokePatharray","elementsToShow","className","css","designAreaWrapper","actualArea","designArea","designAreaCover","createEventType","typeName","objectType","CLICK","DRAG","name","ItemInputGroup","initValue","onChange","value","setValue","isNumber","valueToShow","toFixed","Number","parseFloat","RenderElementInfo","historyQueue","setHistoryQueue","modifyingItem","setModifyingItem","idx","onStyleChange","newInfo","clonedHistory","assign","attributes","newQ","onInfoChange","infoArr","entries","pathItemValue","stylesTitle","stylesWrapper","styleKey","styleValue","styleItemValue","infoItemValue","ItemRenderer","opened","onDeleteBtnClicked","onExpandClicked","historyItemWrapper","historyItemTitleRow","expandBtn","onClick","historyItemName","tagName","toLowerCase","propertyStringParser","deleteHistory","elementInfo","History","modifyingItemValue","items","setItems","filter","clonedItem","historyWrapper","Provider","DrawingToolSelector","modeArr","push","btnProps","icon","selectedToolBtn","unselectedToolBtn","ptToString","join","PathLogger","pathLoggerWrapper","pathLogItem","logPath","setDesignArea","setViewPort","viewPortTxt","designAreaTxt","toolboxWrapper","viewportTool","nums","split","txt","undefined","find","isNaN","designAreaTool","drawingTools","historyTool","pathLoggerTool","defaultDesignArea","defaultToolArea","position","size","isVisible","fluid","initDesignArea","initViewport","initMode","initHistoryQueue","SvgDesigner","toolArea","setToolArea","designAreaProviderValue","viewportProviderValue","drawingModeProviderValue","historyProviderValue","pathElementsValue","mainWindow","onSizeChange","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a52d699d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"designAreaWrapper\":\"style_designAreaWrapper__2vM3d\",\"designAreaCover\":\"style_designAreaCover__28NQl\",\"actualArea\":\"style_actualArea__3pcba\",\"designArea\":\"style_designArea__gRCHs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWindow\":\"svg-designer_mainWindow__2hVdh\"};","import { useState, createContext, useContext } from \"react\";\n\nexport const useDynamicContextProvider = init => {\n    const [state, setState] = useState(init);\n\n    return {\n        state,\n        setState\n    }\n}\n\nexport const useDynamicContextConsumer = context => {\n    const { state, setState } = useContext(context);\n    return [state, setState];\n}\n\nexport const useDynamicContextConsumerState = context => {\n    const { state } = useContext(context);\n    return state;\n}\n\nexport const useDynamicContextConsumerSetter = context => {\n    const { setState } = useContext(context);\n    return setState;\n}\n\n\nconst defaultDynamicContextData = {\n    state: {},\n    setState: state => { }\n};\n\nexport const createDynamicContext = () => createContext(defaultDynamicContextData);","import { createDynamicContext } from './dynamic-context-utils'\n\nexport const DesignAreaContext = createDynamicContext();\n\nexport const ViewportContext = createDynamicContext();\n\nexport const ModeContext = createDynamicContext();\n\nexport const HistoryContext = createDynamicContext();\n\nexport const ModifyingItemContext = createDynamicContext();\n\nexport const PathElementsContext = createDynamicContext();","export const DrawingModes = Object.freeze({\n    NONE: ['none', 'N'],\n    PATH: ['path', 'Pa'],\n    RECT: ['rect', 'Rt'],\n    CIRCLE: ['circle', 'Cr'],\n    getName: drawingMode => drawingMode[0],\n    getIcon: drawingMode => drawingMode[1],\n})","import svgUtils from '@shjeon0730/svg-gen-utils';\nimport { pathUtils } from '@shjeon0730/svg-gen-utils/src/pathUtils/pathUtils';\nimport { DrawingModes } from '../../consts';\n\nexport const dist = (pt1, pt2) => Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2))\n\nexport const createCircle1 = (pt1, pt2, style = {}) => {\n    const info = {\n        cx: pt1.x,\n        cy: pt1.y,\n        r: dist(pt1, pt2),\n        style\n    };\n\n    return { info, element: svgUtils.renderer.createElementInfo('circle', info) };\n}\n\nexport const createCircle2 = (pt1, pt2, style = {}) => {\n    const info = {\n        cx: (pt1.x < pt2.x ? pt1.x : pt2.x) + Math.abs(pt2.x - pt1.x) / 2,\n        cy: (pt1.y < pt2.y ? pt1.y : pt2.y) + Math.abs(pt2.y - pt1.y) / 2,\n        r: dist(pt1, pt2) / 2,\n        style\n    };\n\n    return { info, element: svgUtils.renderer.createElementInfo('circle', info) };\n}\n\n\nexport const createEllipse1 = (pt1, pt2, style = {}) => {\n    const info = {\n        cx: pt1.x,\n        cy: pt1.y,\n        rx: Math.abs(pt2.x - pt1.x),\n        ry: Math.abs(pt2.y - pt1.y),\n        style\n    };\n\n    return { info, element: svgUtils.renderer.createElementInfo('ellipse', info) };\n}\n\nexport const createEllipse2 = (pt1, pt2, style = {}) => {\n    const info = {\n        cx: (pt1.x < pt2.x ? pt1.x : pt2.x) + Math.abs(pt2.x - pt1.x) / 2,\n        cy: (pt1.y < pt2.y ? pt1.y : pt2.y) + Math.abs(pt2.y - pt1.y) / 2,\n        rx: Math.abs(pt2.x - pt1.x) / 2,\n        ry: Math.abs(pt2.y - pt1.y) / 2,\n        style\n    };\n    return { info, element: svgUtils.renderer.createElementInfo('ellipse', info) };\n}\n\n\nexport const createRect = (pt1, pt2, style = {}) => {\n    const info = {\n        x: pt1.x < pt2.x ? pt1.x : pt2.x,\n        y: pt1.y < pt2.y ? pt1.y : pt2.y,\n        width: Math.abs(pt2.x - pt1.x),\n        height: Math.abs(pt2.y - pt1.y),\n        style\n    };\n\n    return { info, element: svgUtils.renderer.createElementInfo('rect', info) };\n}\n\n\nexport const createRectFromCenter = (pt1, pt2, style = {}) => {\n    const info = {\n        x: pt1.x - Math.abs(pt2.x - pt1.x),\n        y: pt1.y - Math.abs(pt2.y - pt1.y),\n        width: Math.abs(pt2.x - pt1.x) * 2,\n        height: Math.abs(pt2.y - pt1.y) * 2,\n        style\n    };\n    return { info, element: svgUtils.renderer.createElementInfo('rect', info) };\n}\n\n\nexport const createArcElement = (keyPressed, pt1, pt2, pt3) => {\n\n    const midPt = { x: (pt1.x + pt2.x) / 2, y: (pt1.y + pt2.y) / 2 };\n\n    const baseLen = dist(pt1, pt2);\n    const addSize = (dist(midPt, pt3) < 3.0) ? 0 : (dist(midPt, pt3) - 3.0) * (baseLen / 4.0);\n    const arcRad = baseLen / 2.0 + addSize;\n\n    const isPositiveArc = () => {\n        const a = (pt2.y - pt1.y) / (pt2.x - pt1.x);\n        const b = pt1.y - (pt1.x * a);\n        const y1 = a * pt3.x + b;\n        const xDirection = pt2.x - pt1.x;\n\n        if (y1 >= pt3.y) {\n            return xDirection > 0 ? 1 : 0;\n        } else {\n            return xDirection > 0 ? 0 : 1;\n        }\n    }\n    return {\n        to: pt2,\n        arcRad,\n        bigArc: keyPressed.shift ? 1 : 0,\n        isPositiveArc: isPositiveArc()\n    };\n\n}\n\nexport const drawWrapperImage = ({ activePt, pathElements, isDragging, keyPressed, tempPts, drawingMode, setTempPts, setTempElement, setWrapperElements, initElement, pathBuffer, setPathBuffer }) => {\n    let tempElement1 = null;\n    let tempElement2 = null;\n\n    const pt = activePt;\n    const prevPts = tempPts.pts;\n    if (prevPts.length === 0) return [];\n    const prevPt = prevPts[prevPts.length - 1];\n    switch (drawingMode) {\n\n        case DrawingModes.CIRCLE:\n            if (keyPressed.alt) {\n                if (keyPressed.shift) {\n                    tempElement1 = createCircle2(prevPt, pt, {\n                        fill: 'transparent',\n                        stroke: 'black',\n                        strokeWidth: 0.1\n                    });\n                    tempElement2 = createRect(prevPt, pt, {\n                        fill: 'transparent',\n                        stroke: 'black',\n                        strokeWidth: 0.1,\n                        strokeDasharray: '1,1'\n                    });\n                } else {\n                    tempElement1 = createCircle1(prevPt, pt, {\n                        fill: 'transparent',\n                        stroke: 'black',\n                        strokeWidth: 0.1\n                    });\n                    const len = dist(prevPt, pt);\n                    const pt1 = svgUtils.pt(prevPt.x - len, prevPt.y - len);\n                    const pt2 = svgUtils.pt(prevPt.x + len, prevPt.y + len);\n\n                    tempElement2 = createRect(pt1, pt2, {\n                        fill: 'transparent',\n                        stroke: 'black',\n                        strokeWidth: 0.1,\n                        strokeDasharray: \"1,1\"\n                    });\n                }\n\n            } else if (keyPressed.shift) {\n                tempElement1 = createEllipse2(prevPt, pt, {\n                    fill: 'transparent',\n                    stroke: 'black',\n                    strokeWidth: 0.1,\n                    strokeDasharray: '1,0'\n                });\n                tempElement2 = createRect(prevPt, pt, {\n                    fill: 'transparent',\n                    stroke: 'black',\n                    strokeWidth: 0.1,\n                    strokeDasharray: '1,1'\n                });\n            } else {\n                tempElement1 = createEllipse1(prevPt, pt, {\n                    fill: 'transparent',\n                    stroke: 'black',\n                    strokeWidth: 0.1,\n\n                });\n                tempElement2 = createRectFromCenter(prevPt, pt, {\n                    fill: 'transparent',\n                    stroke: 'black',\n                    strokeWidth: 0.1,\n                    strokeDasharray: \"1,1\"\n                });\n            }\n            break;\n        case DrawingModes.RECT:\n            if (keyPressed.alt) {//square\n                const xLen = Math.abs(prevPt.x - pt.x);\n                const yLen = Math.abs(prevPt.y - pt.y);\n                const len = xLen > yLen ? xLen : yLen;\n\n                if (keyPressed.shift) {//side start\n\n                    const pmX = pt.x - prevPt.x > 0 ? 1 : -1;\n                    const pmY = pt.y - prevPt.y > 0 ? 1 : -1;\n\n                    const pt2 = svgUtils.pt(prevPt.x + len * pmX, prevPt.y + len * pmY);\n\n                    tempElement1 = createRect(prevPt, pt2, {\n                        fill: 'transparent',\n                        stroke: 'black',\n                        strokeWidth: 0.1\n                    });\n                } else {//center start\n                    const pt1 = svgUtils.pt(prevPt.x - len, prevPt.y - len);\n                    const pt2 = svgUtils.pt(prevPt.x + len, prevPt.y + len);\n                    tempElement1 = createRect(pt1, pt2, {\n                        fill: 'transparent',\n                        stroke: 'black',\n                        strokeWidth: 0.1,\n                    });\n                }\n            } else {\n                if (keyPressed.shift) {\n                    tempElement1 = createRect(prevPt, pt, {\n                        fill: 'transparent',\n                        stroke: 'black',\n                        strokeWidth: 0.1\n                    });\n                } else {\n                    tempElement1 = createRectFromCenter(prevPt, pt, {\n                        fill: 'transparent',\n                        stroke: 'black',\n                        strokeWidth: 0.1,\n                    });\n                }\n            }\n\n            break;\n        case DrawingModes.PATH:\n            if (isDragging) {\n                if (prevPts.length >= 2) {\n                    const pt1 = prevPts[prevPts.length - 2];\n                    const pt2 = prevPts[prevPts.length - 1];\n                    console.log('arc:', { pt1, pt2, pt })\n\n                    const arc = createArcElement(keyPressed, pt1, pt2, pt);\n                    const element = pathBuffer.element.arc(arc.to, arc.arcRad, arc.bigArc, arc.isPositiveArc, true)\n\n                    console.log({ arc })\n                    const currElements = pathElements.map(i => i.element);\n                    tempElement1 = { info: arc, element: pathBuffer.unclosedRender([...currElements, element], 'black', 'transparent', 0.1, { strokeDasharray: \"1,1\" }) };\n                }\n\n            } else {\n                const element = pathBuffer.element.line(pt, true)\n                console.log('line:', { element })\n                const currElements = pathElements.map(i => i.element);\n                tempElement1 = { info: { pt }, element: pathBuffer.unclosedRender([...currElements, element], 'black', 'transparent', 0.1, { strokeDasharray: \"1,1\" }) };\n            }\n\n            break;\n        default:\n            break;\n    }\n\n    let wrapperElements = [];\n    let baseElement;\n    if (keyPressed.ctrl) {//to show grid.\n\n        baseElement = [...initElement];\n    } else {\n        baseElement = [...initElement];\n    }\n    if (tempElement1) {\n        setTempElement(tempElement1);\n        if (tempElement2) {\n            wrapperElements = ([...baseElement, tempElement1.element, tempElement2.element]);\n        } else {\n            wrapperElements = ([...baseElement, tempElement1.element]);\n        }\n    }\n    return wrapperElements;\n}","import svgUtils from '@shjeon0730/svg-gen-utils';\nimport { DrawingModes } from '../../consts';\nimport { dist, createCircle, createEllipse1, createRectFromCenter, createEllipse2, createRect, createArcElement } from './drawers';\n\nconst getPtFromEvent = (e) => {\n    const ratio = 100.0 / e.target.clientWidth;\n    return svgUtils.pt(\n        (window.scrollX + e.clientX) * ratio,\n        (window.scrollY + e.clientY) * ratio)\n}\n\nexport const createMouseDownHandler = ({ setActivePt, pathBuffer, setPathBuffer, setIsDragging, drawingMode, setTempPts }) => e => {\n    const pt = getPtFromEvent(e);\n    setTempPts(state => ({ ...state, pts: [...state.pts, pt] }));\n    if (drawingMode === DrawingModes.PATH) {\n\n        if (!pathBuffer) {\n            setPathBuffer(svgUtils.path.pathUtils(pt));\n        }\n    }\n    setIsDragging(true);\n    setActivePt(pt);\n}\n\n\nexport const createMouseMoveHandler = ({ setActivePt }) => e => {\n    setActivePt(getPtFromEvent(e));\n}\n\n\nexport const createMouseUpHandler = ({ setActivePt, pathBuffer, setPathBuffer, setPathElements, keyPressed, pathElements, setIsDragging, drawingMode, setHistory, tempPts, setTempPts, tempElement, initElement, setTempElement }) => e => {\n\n    const pt = getPtFromEvent(e);\n    const prevPts = tempPts.pts;\n    if (tempPts.length === 0) {\n        setTempElement(null);\n        return;\n    }\n\n    switch (drawingMode) {\n        case DrawingModes.CIRCLE:\n        case DrawingModes.ELLIPSE:\n        case DrawingModes.ELLIPSE_BY_WH:\n        case DrawingModes.RECT:\n            if (dist(prevPts[prevPts.length - 1], pt) > 1.0) {\n                if (tempElement) {\n                    setHistory(state => [...state, { drawingMode, info: tempElement.info, element: tempElement.element }]);\n                }\n            }\n            setTempPts(state => ({ ...state, pts: [] }));\n            setTempElement(null);\n            break;\n        case DrawingModes.PATH:\n            if (prevPts.length >= 2) {\n\n                if (dist(prevPts[prevPts.length - 1], pt) <= 1.0) { //line\n                    if (dist(prevPts[prevPts.length - 2], pt) >= 1.0) {\n                        //prevPts[prevPts.length - 1] is the same spot with pt\n                        const element = pathBuffer.element.line(pt)\n                        setPathElements(state => [...state, { pathLog: { type: 'line', pt }, element }]);\n                        setTempPts(state => ({ ...state, pts: [pt] })); //leave the last pt\n                    } else {\n                        setTempPts(state => ({ ...state, pts: [pt] })); //leave the last pt\n                    }\n\n                } else { //arc\n\n                    const pt1 = prevPts[prevPts.length - 2];\n                    const pt2 = prevPts[prevPts.length - 1];\n                    const arc = createArcElement(keyPressed, pt1, pt2, pt);\n                    const element = pathBuffer.element.arc(arc.to, arc.arcRad, arc.bigArc, arc.isPositiveArc)\n                    setPathElements(state => [...state, { pathLog: { type: 'arc', arc }, element }]);\n                    setTempPts(state => ({ ...state, pts: [pt2] })); //leave the last pt\n                }\n\n            } else {\n                setTempPts(state => ({ ...state, pts: [...state.pts, pt] }));\n            }\n\n            break;\n        default:\n            break;\n    }\n\n    setIsDragging(false);\n    //setActivePt(null);\n}\n","import React, { useMemo, useState } from 'react';\nimport css from './style.module.css';\nimport { DesignAreaContext, ViewportContext, ModeContext, HistoryContext, PathElementsContext } from '../../contexts/globalContexts';\nimport { useDynamicContextConsumerState, useDynamicContextConsumerSetter, useDynamicContextConsumer } from '../../contexts/dynamic-context-utils'\nimport svgUtils from '@shjeon0730/svg-gen-utils';\nimport { useEffect } from 'react';\nimport { createMouseDownHandler, createMouseMoveHandler, createMouseUpHandler } from './mouse-handlers';\nimport { DrawingModes } from '../../consts';\nimport { drawWrapperImage } from './drawers';\n// design-area/index.html\n\nconst rateToPercent = rate => rate * 100 + '%';\nlet keys = { ctrl: false, alt: false, shift: false };\n\nexport default function (props) {\n    const designAreaVals = useDynamicContextConsumerState(DesignAreaContext);\n    const viewport = useDynamicContextConsumerState(ViewportContext);\n    const [modes, setModes] = useDynamicContextConsumer(ModeContext);\n    const [history, setHistory] = useDynamicContextConsumer(HistoryContext);\n    const [pathElements, setPathElements] = useDynamicContextConsumer(PathElementsContext);\n    const [tempElement, setTempElement] = useState(null);\n    const [tempSvg, setTempSvg] = useState([]);\n    const [actualSvg, setActualSvg] = useState([]);\n    const [tempPts, setTempPts] = useState({ pts: [] });\n    const [pathBuffer, setPathBuffer] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [keyPressed, setKeyPressed] = useState({\n        shift: false,\n        alt: false\n    })\n    const [activePt, setActivePt] = useState(null);\n    //const [pathElements, setPathElements] = useState([]);\n\n    const { drawingMode } = modes;\n    const designAreaStyle = useMemo(() => (\n        {\n            width: rateToPercent(designAreaVals.wRate),\n            height: rateToPercent(designAreaVals.hRate)\n        }\n    ), [designAreaVals]);\n\n    const initElement = [\n        svgUtils.renderer.createElementInfo('rect', {\n            x: -1,\n            y: -1,\n            width: viewport.width + 2,\n            height: viewport.height + 2,\n            style: { fill: 'transparent', stroke: 'black', strokeWidth: 1 }\n        })\n    ];\n    const hooksContextVals = { setActivePt, activePt, pathElements, setPathElements, keyPressed, isDragging, setIsDragging, drawingMode, setHistory, setTempPts, tempPts, tempElement, initElement, setTempElement, pathBuffer, setPathBuffer }\n\n    useEffect(() => {\n        const elements = history.map(item => item.element);\n        const svg = svgUtils.renderer.svgRender(React.createElement,\n            viewport.left, viewport.top, viewport.width, viewport.height, { fill: 'transparent' }, elements);\n        setActualSvg(svg);\n    }, [history, viewport]);\n\n    useEffect(() => {\n        setTempPts({ pts: [] });//when drawing mode is changed, set tempPts to empty.\n        setTempElement(null);\n\n        if (drawingMode === DrawingModes.PATH) {\n            setPathElements([]);//initialize path\n        } else {\n            if (pathBuffer) {\n                const elements = pathElements.map(i => i.element);\n                const pathLogs = pathElements.map(i => i.pathLog);\n                const info = { stroke: 'black', fill: 'transparent', strokeWidth: 0.1 }\n                const paths = pathBuffer.render(elements, info.stroke, info.fill, info.strokeWidth);\n                setHistory(state => [...state, { drawingMode, pathLogs, info, element: paths }]);\n                setPathBuffer(null);\n            }\n        }\n    }, [drawingMode])\n\n    useEffect(() => {\n        const keyDownHandler = ({ key }) => {\n\n            if (key === 'Shift') {\n                keys = { ...keys, shift: true };\n                setKeyPressed({ ...keys })\n            }\n            else if (key === 'Alt') {\n                keys = { ...keys, alt: true };\n                setKeyPressed({ ...keys })\n            } else if (key === 'Meta') {\n                keys = { ...keys, ctrl: true };\n                setKeyPressed({ ...keys })\n            }\n            console.log('keydown:', key, { keys })\n        };\n        const keyUpHandler = ({ key }) => {\n            if (key === 'Shift') {\n                keys = { ...keys, shift: false };\n                setKeyPressed({ ...keys })\n            } else if (key === 'Alt') {\n                keys = { ...keys, alt: false };\n                setKeyPressed({ ...keys })\n            } else if (key === 'Meta') {\n                keys = { ...keys, ctrl: false };\n                setKeyPressed({ ...keys })\n            } else if (key === 'Escape') {\n                setModes({ ...modes, drawingMode: DrawingModes.NONE });\n            } else if (key === 'p') {\n                setModes({ ...modes, drawingMode: DrawingModes.PATH });\n            } else if (key === 'c') {\n                setModes({ ...modes, drawingMode: DrawingModes.CIRCLE });\n            } else if (key === 'r') {\n                setModes({ ...modes, drawingMode: DrawingModes.RECT });\n            }\n            console.log('keyup:', key, { keys })\n        };\n\n        window.addEventListener('keydown', keyDownHandler);\n        window.addEventListener('keyup', keyUpHandler);\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n            window.removeEventListener('keyup', keyUpHandler);\n        };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n\n\n    const mouseProps = {\n        onMouseDown: createMouseDownHandler(hooksContextVals),\n        onMouseMove: createMouseMoveHandler(hooksContextVals),\n        onMouseUp: createMouseUpHandler(hooksContextVals)\n    };\n\n    useEffect(() => {\n        if (activePt) {\n            const wrapperElements = drawWrapperImage(hooksContextVals);\n            const pathElementArr = pathElements.map(i => i.element);\n            const tempPaths = pathBuffer && pathElements.length > 0 ? [pathBuffer.unclosedRender(pathElementArr, 'black', 'transparent', 0.1, { strokePatharray: '1,1' })] : [];\n            const elementsToShow = [...wrapperElements, ...tempPaths];\n            const svg = svgUtils.renderer.svgRender(React.createElement,\n                viewport.left, viewport.top, viewport.width, viewport.height, { fill: 'transparent' }, elementsToShow);\n            setTempSvg(svg);\n        } else {\n            setTempSvg(null);\n        }\n\n    }, [activePt, viewport, tempPts, keyPressed, pathElements]);\n\n\n    return (\n        <div className={css.designAreaWrapper} >\n            <div className={css.actualArea} style={designAreaStyle} >\n                {actualSvg}\n            </div>\n            <div className={css.designArea} style={designAreaStyle} >\n                {tempSvg}\n            </div>\n            <div className={css.designAreaCover} style={designAreaStyle} {...mouseProps}>\n                hey\n            </div>\n        </div>\n    );\n}","\nfunction createEventType(typeName) {\n    return Object.freeze({\n        objectType: 'event-type',\n        typeName\n    });\n}\nexport const MouseEventTypes = Object.freeze({\n    CLICK: createEventType(\"Click\"),\n    DRAG: createEventType(\"Drag\")\n});\n\nconst eventObjectTypeName = Object.freeze({\n    name: 'svg-designer-event'\n});\n\nexport function createAEvent(eventType, pt1, pt2) {\n    console.log('create an event:', eventType, pt1, pt2);\n    return {\n        objectType: eventObjectTypeName,\n        eventType,\n        updated: Date.now(),\n        clickedPt: eventType === MouseEventTypes.CLICK ? pt1 : null,\n        dragStartPt: eventType === MouseEventTypes.DRAG ? pt1 : null,\n        dragEndPt: eventType === MouseEventTypes.DRAG ? pt2 : null\n    }\n}\n\nexport function isEvent(item) {\n    if (item.objectType === eventObjectTypeName) return true;\n    else return false;\n}\n\nconst ptToString = pt => (`(${pt.x.toFixed(2)},${pt.y.toFixed(2)})`);\n\nconst eventToString = (item) => {\n    console.log('eventToString:', item);\n    return item.eventType === MouseEventTypes.CLICK ?\n        'Click on ' + ptToString(item.clickedPt) :\n        'Drag from ' + ptToString(item.dragStartPt) + ' to ' + ptToString(item.dragEndPt);\n}\n\nexport function parseEvent(item) {\n    return Object.freeze({\n        eventType: item.eventType,\n        clickedPt: item.clickedPt,\n        dragStartPt: item.dragStartPt,\n        dragEndPt: item.dragStartPt,\n        toString: () => eventToString(item)\n    })\n}","import React from 'react';\nimport { useDynamicContextConsumerState, useDynamicContextConsumer, useDynamicContextProvider } from '../../../contexts/dynamic-context-utils';\nimport { HistoryContext, ModifyingItemContext } from '../../../contexts/globalContexts';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport svgUtils from '@shjeon0730/svg-gen-utils';\nimport css from './style.module.css';\nimport { isEvent, parseEvent } from '../../../utils/event-manager';\nimport { DrawingModes } from '../../../consts';\n\nconst propertyStringParser = element => {\n    switch (element.tagName.toLowerCase()) {\n        case 'circle':\n            return `r: ${element.attributes.r.toFixed(2)}`\n        case 'ellipse':\n            return `rx,ry: ${element.attributes.rx.toFixed(2)}, ${element.attributes.ry.toFixed(2)}`\n        case 'rect':\n            return `w,h: ${element.attributes.width.toFixed(2)}, ${element.attributes.height.toFixed(2)}`\n        default:\n            return \"?\"\n    }\n}\n\nconst ItemInputGroup = (props) => {\n    const { name, initValue, className, onChange } = props;\n    const [value, setValue] = useState(initValue);\n    const isNumber = typeof initValue === 'number';\n\n    const onItemChange = e => {\n        let value = e.target.value;\n        setValue(value);\n        if (isNumber) value = Number.parseFloat(value);\n        onChange(value);\n    }\n\n    const valueToShow = typeof value === 'number' ? value.toFixed(3) : value;\n    return (<div key={name}>\n        <label>{name}</label>\n        <input className={className} value={valueToShow} onChange={onItemChange} />\n    </div>);\n}\n\nconst RenderElementInfo = () => {\n    const [historyQueue, setHistoryQueue] = useDynamicContextConsumer(HistoryContext);\n    const [modifyingItem, setModifyingItem] = useDynamicContextConsumer(ModifyingItemContext);\n\n    const { idx, item } = modifyingItem;\n    const onStyleChange = key => value => {\n        console.log(\"onStyleChange:\", { key, value, modifyingItem })\n\n        const newInfo = {\n            ...modifyingItem.item.info,\n            style: {\n                ...modifyingItem.item.info.style,\n                [key]: value\n            }\n        };\n\n        let clonedHistory = Object.assign({}, historyQueue[idx]);\n        clonedHistory = {\n            ...clonedHistory,\n            info: newInfo,\n            element: {\n                ...clonedHistory.element,\n                attributes: {\n                    ...clonedHistory.element.attributes,\n                    ...newInfo\n                }\n            }\n        }\n        console.log({ clonedHistory });\n        const newQ = historyQueue.map((item, idx) => idx === modifyingItem.idx ? clonedHistory : item);\n        setHistoryQueue(newQ);\n        setModifyingItem(state => ({ ...state, info: newInfo, item: { ...state.item, info: newInfo } }));\n    }\n\n    const onInfoChange = key => value => {\n        console.log(\"info-change\", { key, value })\n        const newInfo = {\n            ...modifyingItem.item.info,\n            [key]: value\n        }\n\n        let clonedHistory = Object.assign({}, historyQueue[idx]);\n        clonedHistory = {\n            ...clonedHistory,\n            info: newInfo,\n            element: {\n                ...clonedHistory.element,\n                attributes: {\n                    ...clonedHistory.element.attributes,\n                    ...newInfo\n                }\n            }\n        }\n        console.log('cloned history:', { clonedHistory });\n        const newQ = historyQueue.map((item, idx) => idx === modifyingItem.idx ? clonedHistory : item);\n        setHistoryQueue(newQ);\n        setModifyingItem(state => ({ ...state, info: newInfo, item: { ...state.item, info: newInfo } }));\n    }\n    if (!item) return null;\n    const { drawingMode, info, pathLogs } = item;\n    switch (drawingMode) {\n        case DrawingModes.PATH:\n            const infoArr = Object.entries(info).map(([key, value]) => {\n                return <ItemInputGroup className={css.pathItemValue} name={key} key={key} initValue={value} onChange={onInfoChange(key)} />\n            }) || [];\n            const paths = (<div>\n                {pathLogs.type}\n                {/* pathLog: { type: 'arc', arc } */}\n            </div>);\n            return [...infoArr, paths];\n        default:\n            return Object.entries(info).map(([key, value]) => {\n                if (key === 'style') {\n                    return (<div key={key}>\n                        <div className={css.stylesTitle}>Styles</div>\n                        <div className={css.stylesWrapper}>\n                            {\n                                Object.entries(value).map(([styleKey, styleValue]) => {\n                                    return <ItemInputGroup className={css.styleItemValue} key={styleKey} name={styleKey} initValue={styleValue} onChange={onStyleChange(styleKey)} />\n                                })\n                            }\n                        </div>\n                    </div>);\n                } else {\n                    return (<div key={key}>\n                        <ItemInputGroup className={css.infoItemValue} key={key} name={key} initValue={value} onChange={onInfoChange(key)} />\n                    </div>);\n                }\n\n            });\n    }\n}\n\nconst ItemRenderer = (props) => {\n    const { item, opened, idx, onDeleteBtnClicked, onExpandClicked } = props;\n    const element = item.element;\n    return (<div key={\"key-\" + idx} className={css.historyItemWrapper}>\n        <div className={css.historyItemTitleRow}>\n            <div className={css.expandBtn} onClick={onExpandClicked}>{opened ? '-' : '+'}</div>\n            <div className={css.historyItemName}>\n                {element.tagName}({propertyStringParser(element)})\n            </div>\n            <div className={css.deleteHistory} onClick={onDeleteBtnClicked}>X</div>\n        </div>\n        {\n            opened ?\n                (\n                    <div className={css.elementInfo}>\n                        <RenderElementInfo />\n                    </div>\n                ) : null\n        }\n    </div>);\n}\n\nexport default function History(props) {\n    const modifyingItemValue = useDynamicContextProvider({ idx: -1, item: null });\n    const [historyQueue, setHistoryQueue] = useDynamicContextConsumer(HistoryContext);\n\n    const { state: modifyingItem, setState: setModifyingItem } = modifyingItemValue;\n    const [items, setItems] = useState(<div>no data</div>);\n\n\n    const onDeleteBtnClicked = (idx) => {\n        const a = historyQueue.filter((item, i) => i !== idx);\n        if (idx === modifyingItem.idx) {\n            setModifyingItem({ idx: -1, item: null });\n        }\n        setHistoryQueue(a);\n    }\n    const onExpandClicked = (idx) => {\n        if (idx >= 0 && modifyingItem.idx === idx) {\n            setModifyingItem({ idx: -1, item: null });\n        }\n        else {\n            const clonedItem = Object.assign({}, historyQueue[idx])\n            setModifyingItem({ idx, item: clonedItem });\n        }\n    }\n\n    useEffect(() => {\n        console.log(\"refreshing history items\")\n\n        setItems(historyQueue.map((item, idx) => {\n            let props;\n            console.log(\"history item\", { idx, item });\n            if (idx === modifyingItem.idx) {\n                props = { opened: true, item: modifyingItem.item, idx, onDeleteBtnClicked: () => onDeleteBtnClicked(idx), onExpandClicked: () => onExpandClicked(idx) };\n            } else {\n                props = { opened: false, item, idx, onDeleteBtnClicked: () => onDeleteBtnClicked(idx), onExpandClicked: () => onExpandClicked(idx) };\n            }\n\n            return <ItemRenderer key={'item-' + idx} {...props} />\n        }));\n\n    }, [historyQueue, modifyingItem.idx, modifyingItem])\n\n    return (\n        <div className={css.historyWrapper}>\n            <ModifyingItemContext.Provider value={modifyingItemValue}>\n                {items}\n            </ModifyingItemContext.Provider>\n        </div>\n    )\n\n}","import React from 'react';\nimport { useDynamicContextConsumer } from '../../../contexts/dynamic-context-utils';\nimport { ModeContext } from '../../../contexts/globalContexts';\nimport svgUtils from '@shjeon0730/svg-gen-utils';\nimport css from './style.module.css';\nimport { DrawingModes } from '../../../consts';\n\nexport default function DrawingToolSelector(props) {\n    const [modes, setModes] = useDynamicContextConsumer(ModeContext);\n    const { drawingMode } = modes;\n    const modeArr = [];\n    for (const key in DrawingModes) {\n        if (typeof DrawingModes[key] !== 'function') modeArr.push(DrawingModes[key]);\n    }\n    const btnProps = (item) => ({\n        onClick: e => {\n            console.log('drawing mode changed to :', item);\n            setModes(state => ({ ...state, drawingMode: item }))\n        }\n    })\n\n    return modeArr.map(item => {\n        const icon = DrawingModes.getIcon(item);\n        return (item === drawingMode) ?\n            <div className={css.selectedToolBtn} {...btnProps(item)}>{icon}</div> :\n            <div className={css.unselectedToolBtn} {...btnProps(item)}>{icon}</div>;\n    })\n}","import React, { useEffect } from 'react';\nimport { useDynamicContextConsumerState } from '../../../contexts/dynamic-context-utils';\nimport { PathElementsContext } from '../../../contexts/globalContexts';\nimport css from './style.module.css';\n\n\nconst ptToString = pt => {\n    return '(' + [pt.x.toFixed(2), pt.y.toFixed(2)].join(',') + ')';\n}\n\nconst logPath = item => {\n    const log = item.pathLog;\n    if (log.type === 'line') {\n        return 'lintTo:' + ptToString(log.pt);\n    } else if (log.type === 'arc') {\n        const arc = log.arc;\n        return 'arc ' + 'to' + ptToString(arc.to) + ' rad' + arc.arcRad.toFixed(2) + ' (' + arc.bigArc + ',' + arc.isPositiveArc + ')';\n\n    } else {\n        return 'what is this type? ' + log.type;\n    }\n}\n\nexport default function PathLogger(props) {\n    const { pathElements } = props;\n\n    return (<div className={css.pathLoggerWrapper}>\n        <div>Path logger</div>\n        {pathElements.map((i, idx) => {\n            console.log({ path: i })\n            return (<div key={idx} className={css.pathLogItem}>\n                {logPath(i)}\n            </div>);\n        })}\n    </div>);\n}","import React from 'react';\nimport css from './style.module.css';\nimport { ViewportContext, DesignAreaContext, PathElementsContext } from '../../contexts/globalContexts'\nimport { useDynamicContextConsumer, useDynamicContextConsumerState } from '../../contexts/dynamic-context-utils';\nimport History from './tools/history';\nimport DrawingTools from './tools/drawing-tool-selector';\nimport PathLogger from './tools/path-logger';\n// tool-area/index.html\n\nconst rateToPercent = rate => rate * 100 + '%';\n\nexport default function (props) {\n    const [designArea, setDesignArea] = useDynamicContextConsumer(DesignAreaContext);\n    const [viewport, setViewPort] = useDynamicContextConsumer(ViewportContext);\n    const onViewportChange = e => {\n        const txt = e.target.value;\n        const nums = txt.split(' ').map(txt => Number.parseFloat(txt));\n        if (nums && nums.length === 4 && nums.find(i => isNaN(i)) === undefined) {\n            setViewPort({\n                left: nums[0],\n                top: nums[1],\n                width: nums[2],\n                height: nums[3]\n            });\n        }\n    }\n\n    const onDesignAreaChange = e => {\n        const txt = e.target.value;\n        const nums = txt.split(' ').map(txt => Number.parseFloat(txt));\n        if (nums && nums.length === 2) {\n            setDesignArea({\n                wRate: nums[0],\n                hRate: nums[1],\n            });\n        }\n    }\n    const viewPortTxt = `${viewport.left} ${viewport.top} ${viewport.width} ${viewport.height}`\n    const designAreaTxt = `${designArea.wRate} ${designArea.hRate}`;\n    const pathElements = useDynamicContextConsumerState(PathElementsContext);\n\n    return (\n        <div className={css.toolboxWrapper}>\n            <div className={css.viewportTool}>\n                <label>viewport</label>\n                <input onChange={onViewportChange} value={viewPortTxt} />\n            </div>\n            <div className={css.designAreaTool}>\n                <label>designArea</label>\n                <input onChange={onDesignAreaChange} value={designAreaTxt} />\n            </div>\n            <div className={css.drawingTools}>\n                <DrawingTools />\n            </div>\n            <div className={css.historyTool}>\n                <History />\n            </div>\n            <div className={css.pathLoggerTool}>\n                <PathLogger pathElements={pathElements} />\n            </div>\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport DesignArea from './components/design-area';\nimport ToolArea from './components/tool-area';\nimport Dock from 'react-dock';\n\nimport css from './svg-designer.module.css';\nimport { DesignAreaContext, ViewportContext, ModeContext, HistoryContext, PathElementsContext } from './contexts/globalContexts';\nimport { useDynamicContextProvider } from './contexts/dynamic-context-utils'\nimport { DrawingModes } from './consts';\n\nconst defaultDesignArea = {\n  width: '80%',\n  height: '100%'\n}\n\nconst defaultToolArea = {\n  position: 'right',\n  size: 0.2,\n  isVisible: true,\n  fluid: true\n}\n\nconst initDesignArea = Object.freeze({\n  wRate: 1,\n  hRate: 1,\n});\n\nconst initViewport = {\n  left: 0,\n  top: 0,\n  width: 100,\n  height: 100\n};\n\nconst initMode = {\n  drawingMode: DrawingModes.NONE\n}\n\nconst initHistoryQueue = []\n\nfunction SvgDesigner() {\n  const [designArea, setDesignArea] = useState(defaultDesignArea);\n  const [toolArea, setToolArea] = useState(defaultToolArea);\n\n  const onToolSizeChanged = size => {\n    setDesignArea(state => ({ ...state, width: ((1.0 - size) * 100.0) + '%' }))\n    setToolArea(state => ({ ...state, size }))\n  }\n\n  const designAreaProviderValue = useDynamicContextProvider(initDesignArea);\n  const viewportProviderValue = useDynamicContextProvider(initViewport);\n  const drawingModeProviderValue = useDynamicContextProvider(initMode);\n  const historyProviderValue = useDynamicContextProvider(initHistoryQueue);\n  const pathElementsValue = useDynamicContextProvider([]);\n  return (\n    <div className={css.mainWindow}>\n      <DesignAreaContext.Provider value={designAreaProviderValue}>\n        <ViewportContext.Provider value={viewportProviderValue}>\n          <ModeContext.Provider value={drawingModeProviderValue}>\n            <HistoryContext.Provider value={historyProviderValue}>\n              <PathElementsContext.Provider value={pathElementsValue}>\n                <Dock {...toolArea} onSizeChange={onToolSizeChanged} >\n                  <ToolArea />\n                </Dock>\n                <div style={designArea}>\n                  <DesignArea />\n                </div>\n              </PathElementsContext.Provider>\n            </HistoryContext.Provider>\n          </ModeContext.Provider>\n        </ViewportContext.Provider>\n      </DesignAreaContext.Provider>\n    </div>\n  );\n}\n\nexport default SvgDesigner;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SvgDesigner from './svg-designer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SvgDesigner />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"svgTool\":\"style_svgTool__1I-Tj\",\"svgPt\":\"style_svgPt__2LDoy\",\"historyWrapper\":\"style_historyWrapper__j8BQE\",\"historyItemWrapper\":\"style_historyItemWrapper__1J7bU\",\"historyItemTitleRow\":\"style_historyItemTitleRow__3q_5O\",\"styleItemValue\":\"style_styleItemValue__2QXu1\",\"infoItemValue\":\"style_infoItemValue__3qdP-\",\"pathItemValue\":\"style_pathItemValue__T_n98\",\"stylesWrapper\":\"style_stylesWrapper__2kdPx\",\"stylesTitle\":\"style_stylesTitle__ES16B\",\"historyItemName\":\"style_historyItemName__3HQI5\",\"expandBtn\":\"style_expandBtn__2b2GD\",\"deleteHistory\":\"style_deleteHistory__2oRP4\",\"selectedToolBtn\":\"style_selectedToolBtn__Vndm0\",\"unselectedToolBtn\":\"style_unselectedToolBtn__495-M\",\"elementInfo\":\"style_elementInfo__1JKgg\",\"pathLoggerWrapper\":\"style_pathLoggerWrapper__3if4q\",\"pathLogItem\":\"style_pathLogItem__1lNwC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolboxWrapper\":\"style_toolboxWrapper__20Asj\",\"viewportTool\":\"style_viewportTool__3B3V5\",\"designAreaTool\":\"style_designAreaTool__3Rmrw\",\"historyTool\":\"style_historyTool__1hhy6\",\"drawingTools\":\"style_drawingTools__23FRq\",\"pathLoggerTool\":\"style_pathLoggerTool__2-4cB\"};"],"sourceRoot":""}